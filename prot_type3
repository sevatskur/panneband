// Includes all necessary and MCC created libraries
#include "mcc_generated_files/system/system.h"
#include "mcc_generated_files/system/pins.h" 
#include "mcc_generated_files/vref/vref.h"
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>

#define PIN_PW (1 << 0)    // PD0 for distance sensor 1
#define PIN_PW_1 (1 << 1)  // PD1 for distance sensor 2
#define PIN_PW_2 (1 << 2)  // PD2 for distnace sensor 3
#define PIN_PWM (1 << 4)   // PC4 for vibration motor 1
#define PIN_PWM_1 (1 << 5) // PC5 for vibration motor 2
#define PIN_PWM_2 (1 << 6) // PC6 for vibration motor 3
#define START_PIN (1 << 2) // PB2 for startup 
#define PERIOD 0x9c3       // Max pwm value
#define N 4                // For 2^N
#define CIRCULAR_BUFFER_SIZE (1 << N) //buffersize 2^N

uint16_t adc_result[3];          // array to store raw adc data for each sensor
float adc_result_flat[3];        // average adc values after being filtered
float distance_cm[3];            // array for 3 different distances
int adc_pins[3] = {ADC0_IO_PD0, ADC0_IO_PD1, ADC0_IO_PD2}; // Distance sensor pins
float duty_cycle[3];             // distance to pwm array
float distance_variable = 0.150; // tested irl 

typedef struct {
    int16_t * const buffer1; // Buffer 1
    unsigned writeIndex1;    // Write index for buffer 1

    int16_t * const buffer2; // Buffer 2
    unsigned writeIndex2;    // Write index for buffer 2

    int16_t * const buffer3; // Buffer 3
    unsigned writeIndex3;    // Write index for buffer 3
} circular_buffer_t;

// Initialize functions before main loop
void circular_buffer_write(circular_buffer_t *c, int16_t data, int8_t buffer_number);
int16_t circular_buffer_read(circular_buffer_t *c, unsigned Xn, int8_t buffer_number);
int32_t accumolator(int16_t sample, int8_t buffer_number);
float map_distance_to_duty_cycle(float distance_cm);
int16_t adc_switch_and_read(int pin_index);
int find_min_index(float array[], int size);

int main(void) {
    //Pins are initialized in MCC
    SYSTEM_Initialize(); 

    startup(); //Used to indicate system startup

    _delay_ms(48);
    PORTB.DIRCLR = START_PIN; //Disabled after 48ms to start sensors

    while (1) {

        for (int i = 0; i < 3; i++) {

            adc_result[i] = adc_switch_and_read(i); // Raw adc data for each sensor

            adc_result_flat[i] = accumolator(adc_result[i], i); // Filtered adc data for each sensor

            distance_cm[i] = (float) adc_result_flat[i] * distance_variable; // Distance for each pin

            duty_cycle[i] = map_distance_to_duty_cycle((uint16_t) distance_cm[i]); //Duty cycle to set pwm          
        }
        int min_index = find_min_index(adc_result_flat, 3); // Finds the sensor thats closest to an object

        for (int i = 0; i < 3; i++) { //Vibrates the one thats closest to an object
            if (i == min_index) {
                if (i == 0) {
                    TCA1.SINGLE.CMP0 = (float) (PERIOD * duty_cycle[0]);
                    TCA1.SINGLE.CMP1 = 0;
                    TCA1.SINGLE.CMP2 = 0;
                } else if (i == 1) {
                    TCA1.SINGLE.CMP1 = (float) (PERIOD * duty_cycle[1]);
                    TCA1.SINGLE.CMP0 = 0;
                    TCA1.SINGLE.CMP2 = 0;
                } else if (i == 2) {
                    TCA1.SINGLE.CMP2 = (float) (PERIOD * duty_cycle[2]);
                    TCA1.SINGLE.CMP0 = 0;
                    TCA1.SINGLE.CMP1 = 0;
                }
            }
        }
        printf("dist1 : %u \r\n", adc_result[0]);
        printf("dist2 : %u \r\n", adc_result[1]);
        printf("dist3 : %u \r\n", adc_result[2]);
    }
}

// Writes sensor data for each sensor
void circular_buffer_write(circular_buffer_t *c, int16_t data, int8_t buffer_number) {
    if (buffer_number == 0) {
        c -> buffer1[c->writeIndex1] = data;
        c->writeIndex1 = (c->writeIndex1 + 1) % CIRCULAR_BUFFER_SIZE;
    } else if (buffer_number == 1) {
        c -> buffer2[c->writeIndex2] = data;
        c->writeIndex2 = (c->writeIndex2 + 1) % CIRCULAR_BUFFER_SIZE;
    } else if (buffer_number == 2) {

        c -> buffer3[c->writeIndex3] = data;
        c->writeIndex3 = (c->writeIndex3 + 1) % CIRCULAR_BUFFER_SIZE;
    }
}

// Reads buffer data for each sensor
int16_t circular_buffer_read(circular_buffer_t *c, unsigned Xn, int8_t buffer_number) {
    if (buffer_number == 0) {
        return c->buffer1[(c->writeIndex1 - Xn + CIRCULAR_BUFFER_SIZE - 1) % CIRCULAR_BUFFER_SIZE];
    } else if (buffer_number == 1) {
        return c->buffer2[(c->writeIndex2 - Xn + CIRCULAR_BUFFER_SIZE - 1) % CIRCULAR_BUFFER_SIZE];
    } else if (buffer_number == 2) {

        return c->buffer3[(c->writeIndex3 - Xn + CIRCULAR_BUFFER_SIZE - 1) % CIRCULAR_BUFFER_SIZE];
    }
    return 0;
}

int32_t accumolator(int16_t sample, int8_t buffer_number) {
    // Declares a ringbuffer with dataspace given by CIRCULAR_BUFFER_SIZE variable
    static int16_t bufferDataSpace1[CIRCULAR_BUFFER_SIZE];
    static int16_t bufferDataSpace2[CIRCULAR_BUFFER_SIZE];
    static int16_t bufferDataSpace3[CIRCULAR_BUFFER_SIZE];
    static int32_t sum[3] = {0};

    static circular_buffer_t c = {
        .buffer1 = bufferDataSpace1, // For sensor 1
        .buffer2 = bufferDataSpace2, // For sensor 2
        .buffer3 = bufferDataSpace3, // For sensor 3
        .writeIndex1 = 0,
        .writeIndex2 = 0,
        .writeIndex3 = 0
    };
    // Writes to ringbuffer
    circular_buffer_write(&c, sample, buffer_number);

    static int16_t counter[] = {0, 0, 0}; // counter elements 0, 1 and 2

    // Checks if ringbuffer has been filled 
    if (counter[buffer_number] >= CIRCULAR_BUFFER_SIZE) {
        // Deducts the oldest sample whilst adding a new
        sum[buffer_number] -= circular_buffer_read(&c, CIRCULAR_BUFFER_SIZE - 1, buffer_number);
        sum[buffer_number] += circular_buffer_read(&c, 0, buffer_number);
    }   // Sums all values in the ringbuffer 
    else {
        if (buffer_number == 0) {
            for (uint16_t n = 0; n < CIRCULAR_BUFFER_SIZE; n++) {
                sum[buffer_number] += (int32_t) c.buffer1[n];
            }
            counter[0]++;
        } else if (buffer_number == 1) {
            for (uint16_t n = 0; n < CIRCULAR_BUFFER_SIZE; n++) {
                sum[buffer_number] += (int32_t) c.buffer2[n];
            }
            counter[1]++;
        } else if (buffer_number == 2) {
            for (uint16_t n = 0; n < CIRCULAR_BUFFER_SIZE; n++) {

                sum[buffer_number] += (int32_t) c.buffer3[n];
            }
            counter[2]++;
        }
        counter[buffer_number] = CIRCULAR_BUFFER_SIZE;
    }
    return sum[buffer_number] / CIRCULAR_BUFFER_SIZE;
}

int16_t adc_switch_and_read(int pin_index) {

    ADC0.MUXPOS = adc_pins[pin_index];       // Starts ADC on the chosen pin

    ADC0.COMMAND = ADC_STCONV_bm;            // Start ADC conversion

    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm));// Wait for conversion to complete

    ADC0.INTFLAGS = ADC_RESRDY_bm;           // Clear the result-ready flag

    return ADC0.RES;                         // Return ADC result
}

float map_distance_to_duty_cycle(float distance_cm) {
    uint16_t max_distance = 250; // Chosen max distance 
    int16_t duty_cycle = 100 - (distance_cm * 100 / max_distance); // Map function 

    // Restricts duty cycle from 0-100
    if (duty_cycle > 100) {
        duty_cycle = 100;
    } else if (duty_cycle < 0) {
        duty_cycle = 0;
    }

    return ((float) duty_cycle / 100); // Returns a float(Important))
}

int find_min_index(float array[], int size) {
    int min_index = 0; // Variable to store the smallest value
    float min_value = array[0];

    for (int i = 1; i < size; i++) { // Checks through the array
        if (array[i] < min_value) { //  Updates min_index with the new "smallest value"
            min_value = array[i];
            min_index = i;
        }
    }
    return min_index; // Returner indeksen til den minste verdien
}

void startup() { // To indicate that the power is on

    for (int i = 0; i < 3; i++) {
        if (i == 0) {
            TCA1.SINGLE.CMP0 = PERIOD;
        } else if (i == 1) {
            TCA1.SINGLE.CMP1 = PERIOD;
        } else if (i == 2) {
            TCA1.SINGLE.CMP2 = PERIOD;
        }
        _delay_ms(500);
    }
}
